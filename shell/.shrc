# ================================================================
# Notes
# ================================================================
# Five profile scripts gets executed (in the below order) when an zsh shell is launched and closed.
# Place code in .zshenv, .zshrc, and .zprofile.
#
# (1) .zshenv
# Always sourced when any zsh shell lauches, regardless if the shell is a login shell or not, or an interactive shell or not.
# Used to:
# * Set (export) variables that should be available to other programs (e.g. $PATH, $EDITOR, $PAGER, etc.).
# * Set $ZDOTDIR, to specify an alternative location for the rest of the zsh configuration files.
#
# (2) .zprofile
# The Same as .zlogin, except that it's sourced before .zshrc.
# An alternative to .zlogin, for ksh fans. The two are not intended to be used together.
# Used to:
# * Set PATH.
# * Set other exported shell vairables.
# * Note: All exported shell variables, aka. environment variables, are inherited by non-login
#   shells from login shell, beause non-login shells are subshells of parent login shell.
#
# (3) .zshrc
# Only runs when an interactive shell is opened, both for login shell or non-login shells,
# i.e. subshells of login shells.
# Used to:
# * Set options for interactive shells, e.g. with the setopt and unsetopt commands.
# * Set up prompt, alias, and other settings not inherited by subshells from parent shells.
# * Load shell modules, set history options, set up zle and completion, etc.
# * Set variables only used in nteractive shells (e.g. $LS_COLORS).
#
# (4) .zlogin
# Only runs when a login shell is opened (i.e. the first zsh terminal opened after starting vscdoe).
# Runs after .zshrc, if the login shell is also interactive.
# Used to:
# * Start X using startx. Some systems start X on boot, so this file is not always very useful.
#
# (5).zlogout
# Executed when closing a zsh shell.
# Used to clear and reset the terminal.
#
# * Information:
#   - https://unix.stackexchange.com/questions/462663/purpose-of-n-ps1-in-bashrc
#   - https://unix.stackexchange.com/questions/3052/is-there-a-bashrc-equivalent-file-read-by-all-shells
# * Do NOT source .[..]profile from .[..]rc.
#   - .profile, .bash_profile, .zprofile, etc, are login-time scripts, i.e. meant to run ONCE when the first shell session Launches.
#   - As such, they might run programs intended to execute only once per session.
#   - Running .[..]profile every time a shell session launches might override environment variables set by the user manually.
#   - Thus, ideally, one should not run .[..]profile files every time an (interactive) shell opens, only when first parent shell,
#   - aka. login shell, opens.
#   - Login shells are launched when new terminal window is opened.
#   - Non-login shells are launched when login shell spawns a subshell, by running script | subshell command | launching new shell: `zsh`.
#   - Remember to make the dotfiles executable, otherwise they will not run and the setup will not work.
# * Add all environment variables and non-graphical programs (ssh-agent, etc.) to .profile, which is run by other shell's profile files.
#   - .profile is run automatically by bash, sh, dash, and perhaps others, when they are login shells (interactive or not).
#   - Environment variables, i.e. exported shell variables, are visible to subshells because they are exported.
#   - Thus, .profile is ideal for code that should only run once, when the first shell opens.
#   - Zsh does not run .profile directly, instead it runs .zprofile, which in turn runs .profile.
#   - That way, all needed environment variables are sourced in one place, and only once.
# * Add other code, related to interactive shells, to .shrc.
#   - Prompt settings, aliases, non-exported functions, etc.
#   - This file is not sourced automatically by any shell, so source manually in other shell's rc files (.bashrc, .zshrc, etc.).
# * Do NOT source .[..]rc from .[..]profile.
#   - When login shell runs, i.e. when terminal window is first opened, both .[..]profile and .[..]rc runs.
#   - Note: .[..]rc only runs if shell is interactive, which it is when new terminal is opened.
#   - Moreover, shell variables exported in login shell, aka. environment variables, are also set in non-login shells,
#     because they are subshells of login shell.
#   - Thus, since both .[..]rc and .[..]profile are called when new terminal is opened,
#     and .[..]rc runs again in new interactive subshells which inherits environment from parent shell that ran .[..]profile,
#     it is NOT nececcary to source .[..]rc from .[..]profile.
#   - In fact, sourcing .[..]rc from .[..]profile will cause profile to run twice, when new login shell is launched, i.e. when new terminal window is opened.
#   - .[..]profile > .profile && .[..]profile > .[..]rc > .shrc
#
# * Result:
#   - .[..]profile > .profile and .[..]rc > .shrc all run when new terminal is opened, because termianl launches an interactive login shell.
#   - When subshells, i.e. non-login shells, are launched from login shell, .[..]rc > .shrc runs again.
#   - Subshell inherits environment, i.e. all exported shell variables, from parent login shell.
#   - .[..]rc > .shrc sets up aliases and prompt, which are not inherited by subshell from parent login shell, so should run again.
# ================================================================

# ================================================================
# About Login Shells.
# ================================================================
# Information: https://unix.stackexchange.com/questions/38175/difference-between-login-shell-and-non-login-shell
# * A login shell is a shell given to a user upon login into a Unix system.
# * A login shell is the first process that executes under the user's ID, when logging in for an interactive session.
# * A login shell is the shell that executes the commands in the user's .profile file.
# * Terminal emulators start login shell when new terminal window is started.
# * Login process tells shell to behave as login shell by passing argument 0- (0 is normally the name of the shell executable), e.g. -bash instead of bash.
# * Login shells (Bourne shells like sh and bash, but not zsh) read /etc/profile and ~/.profile.
# * If ~/.bash_profile is present, bash only reads that and not ~/.profile.
# * All interactive shells read .[..]rc files, including login shells.
# * When you log in on a text console, or through SSH, or with su -, you get an interactive login shell.
# * When you log in in graphical mode (on an X display manager), you don't get a login shell, instead you get a session manager or a window manager.
# * It's rare to run a non-interactive login shell, but some X settings do that when you log in with a display manager, so as to arrange to read the profile files.
# * Another way to get a non-interactive login shell is to log in remotely with a command passed through standard input which is not a terminal.
#   - For example: ssh example.com script-stored-locally
#   - As opposed to: ssh example.com script-on-remote-machine, which runs non-interactive, login shell.
# * Interactive, non-login shell:
#   - An interactive, non-login shell is launched whenever an interactive shell is started in a terminal in an existing session.
#   - For example by launching shell inside another shell, e.g. with `bash`.
#   - All interactive shells run ~/.[..]rc
#   - By default, there is no ~/.shrc, files that automatically run are ~/bashrc, ~/.zshrc, etc.
#   - $ENV, if set, is also invoked by POSIX/XSI-compliant shells such as dash, ksh, and bash when invoked as `sh`.
# * Non-interactive, non-login shells:
#   - A non-interactive, non-login shell is used whenever shell runs script or command (unless script is executed with exec, which replaces current shell).
#   - Some shells read a startup file in this case.
#   - Bash runs the file indicated by the BASH_ENV variable, zsh runs /etc/zshenv and ~/.zshenv
#   - Using these startup files is risky, as the shell can be invoked in all sorts of contexts and there's hardly anything you can do that might not break something.
# ================================================================

echo "Running .shrc..."
# ================================================================
# Load the Shell Dotfiles, and Then Some
# ================================================================
# These have already been sourced in `.profile`, which runs when login
# shell is opened, and are exported form there, thus they are made available
# to all sub-shells, i.e. non-login-shells, thus not needed here in `[..]rc`,
# which runs when any interactive shell starts (login shell or not).
# for file in ~/.{exports,path,aliases,functions}; do
#   [ -r "$file" ] && [ -f "$file" ] && source "$file"
# done
# unset file

# ================================================================
# Set up shell integration for Wezterm.
# Enables scrollback to start of earlier command,
# selecting output of previous commands, etc.
# PATH is already set up in .zprofile > .profile.
# WARNING: Adds small noticable delay.
# ================================================================
# source $WEZTERM_HOME/shell-integration/wezterm.sh

# ================================================================
# Add custom fzf settings.
# Could be set in .profile, since exported shell variables,
# aka. environment variables, are inherited by non-login shells
# from login shell, because non-login shells are subshells
# of parent login shell.
# Instead, keep them here together with the functions,
# which need to be here since they are not exported.
# Note: .[..]rc files are sourced for every interactive shell,
# both for login and non-login shells.
# ================================================================
# FZF_DEFAULT_COMPLETION_OPTIONS is our own environment variable.
export FD_DEFAULT_OPTIONS=(--hidden --no-ignore --follow
  --exclude .git
  --exclude node_modules
  --exclude .history
  --exclude .rustup
  --exclude .cargo
  --exclude .cache)

export EZA_OPTIONS=(-la --color=always --icons=always --git --git-repos --hyperlink --header --grid --octal-permissions --no-permissions --time-style=relative)

# Always execute nvim when Enter is pressed (will crash on input that is not a file, but OK tradeoff).
# Do not bind Enter to open in nvim here, because fzf is also used by yazi and others.
export FZF_DEFAULT_OPTS="--ansi --height=90% --layout=reverse --info=inline --border --margin=1 --padding=1
  --color \"hl:-1:underline,hl+:-1:underline:reverse\"
  --tmux 90%,90%
  --multi
  --prompt 'All> '
  --header 'CTRL-T: Files/Directories | CTRL-R: All'
  --bind 'ctrl-t:transform:[[ {fzf:prompt} =~ Files ]] && echo \"change-prompt(Directories> )+reload(fd $FD_DEFAULT_OPTIONS --type d)+change-preview-window(up,60%,border-bottom)\" || echo \"change-prompt(Files> )+reload(fd $FD_DEFAULT_OPTIONS --type f)+change-preview-window(right,70%,border-left)\"'
  --bind 'ctrl-r:transform:echo \"change-prompt(All> )+reload(fd $FD_DEFAULT_OPTIONS)\"'
  --preview '[[ {fzf:prompt} =~ Directories ]] && eza $EZA_OPTIONS {} || bat --color=always {}'
  --preview-window 'right'
  "

export FZF_DEFAULT_COMMAND="fd $FD_DEFAULT_OPTIONS"
# ================================================================
# Options for fzf in <c-t> | <m-c> | <c-r> mode.
# FZF_DEFAULT_OPTS also apply here, so overwrite its options if
# necessary to deviate from general settings.
# ================================================================
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="
  --bind 'enter:execute(nvim {+})'"
# export FZF_ALT_C_COMMAND="fd $FZF_DEFAULT_OPTS --type d"
export FZF_CTRL_R_OPTS="--prompt 'Commands> ' --header '' --preview ''"

# ================================================================
# Options for fzf in completions mode: **<Tab>.
# FZF_DEFAULT_OPTS also apply here, so overwrite its options if
# necessary to deviate from general settings.
# ================================================================
# Use ~~ as the trigger sequence instead of the default **.
# export FZF_COMPLETION_TRIGGER='~~'

# General options for fzf in completion mode.
# export FZF_COMPLETION_OPTS='--border --info=inline'

# Command run by fzf completion mode when preceding command lists file paths.
# Example: ls **<Tab>.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  $FZF_DEFAULT_COMMAND . "$1"
}

# Command run by fzf completion mode when preceding command lists directories.
# Example: cd **<Tab>.
_fzf_compgen_dir() {
  fd "$FD_DEFAULT_OPTIONS" --type d . "$1"
}

# Cusom list of commands run by fzf completion mode, for different preceding commands.
# Overwrites compgen functions above.
# Example: cd **<Tab>.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
  # cd) fzf --preview "eza $EZA_OPTIONS {} | head -200' "$@" ;;
  cd) fzf --preview "eza $EZA_OPTIONS {}" "$@" ;;
  export | unset) fzf --preview "eval 'echo \$'{}" "$@" ;;
  ssh) fzf --preview 'dog {}' "$@" ;;
  *) fzf --preview 'bat -n --color=always {}' "$@" ;;
  esac
}

# ================================================================
# Yazi wrapper script.
# ================================================================
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# ================================================================
# Setup Cargo.
# ================================================================
source "$HOME/.cargo/env"

# ================================================================
# Setup and launch tmux (turned off for now, due to lag).
# ================================================================
# source "$HOME/scripts/tmux-start.sh"
