echo "Running .zsh_prompt..."

# Starship introduces noticable delay.
# Too slow.
# eval "$(starship init zsh)"

# Fast and simple prompt.
PS1='%F{blue}%~ %(?.%F{green}.%F{red})%#%f '
# PS1=$'\n%F{blue}%~\n%(?.%F{green}.%F{red})%#%f '

return

prompt_git() {
  local s='';
  local branchName='';

  # Check if the current directory is in a Git repository.
  git rev-parse --is-inside-work-tree &>/dev/null || return;

  # Check for what branch we’re on.
  # Get short symbolic ref. If HEAD isn’t a symbolic ref,
  # get a tracking remote branch or tag. Otherwise, get the
  # short SHA for the latest commit, or give up.
  branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
    git describe --all --exact-match HEAD 2> /dev/null || \
    git rev-parse --short HEAD 2> /dev/null || \
    echo '(unknown)')";

  # Early exit for Chromium & Blink repo, as the dirty check takes too long.
  # Thanks, @paulirish!
  # https://github.com/paulirish/dotfiles/blob/dd33151f/.bash_prompt#L110-L123
  repoUrl="$(git config --get remote.origin.url)";
  if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
    s+='*';
  else
    # Check for uncommitted changes in the index.
    if ! $(git diff --quiet --ignore-submodules --cached); then
      s+='+';
    fi;
    # Check for unstaged changes.
    if ! $(git diff-files --quiet --ignore-submodules --); then
      s+='!';
    fi;
    # Check for untracked files.
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
      s+='?';
    fi;
    # Check for stashed files.
    if $(git rev-parse --verify refs/stash &>/dev/null); then
      s+='$';
    fi;
  fi;

  [ -n "${s}" ] && s=" [${s}]";

  # $1 and $2 are arguments 1 and 2, passed to this function,
  # which include color escape codes.
  echo "${1}${branchName}${2}${s}";
}

# ================================================================
# Manual Prompt, via Terminfo and ANSI Escape Codes.
# ===============================================================
# - `infocmp xterm-ghostty | screen | xterm`: Show terminfo database for particula terminal,
#   i.e. all terminal capability names, aka. "capnames", i.e. terminal's capabilites.
# - If `setaf` is in terminfo database, terminal supports setting text foreground color.
# - `tsup colors`: Show color range supported by terminal (256).
# - `tput setaf X`: Set foreground color to X, e.g. `echo $(tput setaf 124)hello`.
# - `$(tput setaf 124)` sends escape code to terminal, thus is equal to `ESC[48;5;{ID}m`,
#   which in ZSH can be written as: `\e[48;5;{ID}m`.
# - Thus, `echo $(tput setaf 124)hello` === `echo $'\e48;5;{ID}mhello`. 
# - `$'..'`: Used to interpret escape code inside quotes, like `echo` in ZSH,
#   or `echo -e` in bash.
# - `In ZSH, it is possible to use the 256 color digits directly in e.g. `F{<digit>}`.
# - ZSH:
#   - `PS1='%F{blue}%~ %(?.%F{green}.%F{red})%#%f '`.
#   - `PS1='%F{33}%~ %(?.%F{64}.%F{124})%#%f '`.
if tput setaf 1 &> /dev/null; then
  tput sgr0; # reset colors
  bold=$(tput bold);
  reset=$(tput sgr0);
  # Solarized colors, taken from http://git.io/solarized-colors.
  black=$(tput setaf 0);
  blue=$(tput setaf 33);
  cyan=$(tput setaf 37);
  green=$(tput setaf 64);
  orange=$(tput setaf 166);
  purple=$(tput setaf 125);
  red=$(tput setaf 124);
  violet=$(tput setaf 61);
  white=$(tput setaf 15);
  yellow=$(tput setaf 136);
else
  bold='';
  reset="\e[0m";
  black="\e[1;30m";
  blue="\e[1;34m";
  cyan="\e[1;36m";
  green="\e[1;32m";
  orange="\e[1;33m";
  purple="\e[1;35m";
  red="\e[1;31m";
  violet="\e[1;35m";
  white="\e[1;37m";
  yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
  userStyle="${red}";
else
  userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
  hostStyle="${bold}${red}";
else
  hostStyle="${yellow}";
fi;

# Set terminal title and prompt.
# `\[`         : Begin sequence of non-printing characters,
#                which could be used to embed terminal control sequence into prompt.
# `\]`         : End sequence of non-printing characters.
# `\033`       : Escape sequence, initiated up until, and include, `;`.
# `\033]0;`    : Initiates string that sets title in titlebar of terminal,
#                and that string is terminated by `\007` special character.
# `$'...'`     : Like normal quotes, except escape sequences are interpreted,
#                like in ZSH `echo` or bash `echo -e`.
# `%{...%}`    : Like `$'...'`, i.e. escape sequences are handled.
# `%F122`      : Instead of writing escape codes directly, it is possible to use
#                `%F<digit>`, where `<digit>` is one of 256 color integers.
#                See: `man zshmisc`.
# `color[red]` : Lastly, it is also possible to use user-contributed function
#                `colors` to access each of 8 basic colors, which just swaps in
#                ANSI escape sequence, by executing `autoload -U colors && colors`,
#                then accessing forground color for instance: `fg[red]`.
#                See docs: `.../User-Contributions.html#Other-Functions`.
PS1=$'\033]0;%~\007'; # Working directory base name in the terminal titlebar.
PS1+=$'%B\n'; # Set bold and add newline.
PS1+="${userStyle}%n"; # Username.
PS1+="${white} at ";
PS1+="${hostStyle}%m"; # Hostname up to first `.`.
PS1+="${white} in ";
PS1+="${green}%~"; # Current working directory, with `$HOME` replaced by `~`.
# - Nested parameters and command substitutions are supported.
#   - Quotes themselves are also nested.
#   - Thus, inner quotes do not interfere with outer quotes.
# - `PROMPT_SUBST <K> <S>`.
#   - If set, parameter expansion, command substitution and
#     arithmetic expansion are performed in prompts.
#   - Substitutions within prompts do not affect command status.
#   - Thus, set a fixed string to prompt, whithout any expansion,
#     i.e. single quotes, then allow prompt to expand it each time it is drawn.
#   - Otherwise, script would handle expansion before variable assignment,
#     thus dynamic prompt would not recalculate.
local gitStatus='$(prompt_git "${white} on ${violet}" "${blue}")'
setopt PROMPT_SUBST
PS1+="${gitStatus}"; # Git repository details.
PS1+=$'\n';
PS1+="${white}\$ ${reset}"; # `$` and reset color.
export PS1;

PS2="${yellow}→ ${reset}";
export PS2;
