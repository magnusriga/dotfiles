#!/hint/bash
# shellcheck disable=2034

#
# /etc/makepkg.conf
#

# ==================================
# Build and Intstall Package.
# ==================================
# Pre-requisite:
# - Manually download `PKGBUILD` file, and other files needed for build.
# - Done with `git clone <repo>`, using `<repo>` found in e.g. AUR.
# - Use target directory: `$HOME/build/repositories/<package>`.
# - Command : `git clone <url> $HOME/build/repositories/$PACKAGE`.
#
# 1) Build with `makepkg -srci`:
#    IMPORTANT: `makepkg` must be run as normal user, NOT as root, i.e. not with `sudo`.
#    a) `makekpkg` reads `PKGBUILD` to identify url of source files.
#    b) `makekpkg` downloads source files into `SRCDEST`.
#    c) `makekpkg` compiles source files into installable `.pkg.tar.zst` package.
#
# 2) Install:
#    - Install package with: `makepkg -i | --install` OR `pacman -U <pkgname-pkgver>.pkg.tar.zst`.
#    - Which moves executable files, man pages, etc., to specific directory.
#    - Alternatively, to skip this step, call `makepkg` with `-i` flag initially.
#
# 3) Clean:
#    - `makepkg -c | --clean` cleans up `$srcdest` directory
#    - `$srcdest` stores temporary files needed during build.
#    - `$srcdest` often defined in `PKGBUILD` file.
#
# ==================================
# Update Package.
# ==================================
# 1) `git pull`.
# 2) Repeat above steps: Build, install, clean.
#
# ==================================
# `makepkg` flags.
# ==================================
# `-s/--syncdeps`: Automatically resolves and installs dependencies with pacman before building.
#                  If package depends on other AUR packages, you will need to manually install them first.
# `-i/--install` : Installs package if it is built successfully, making it unecessary to execute `makepkg -i | --install` or `pacman -U <pkgname-pkgver>.pkg.tar.zst`.
# `-r/--rmdeps`  : Removes build-time dependencies after build, as no longer needed. May need to be reinstalled next time package is updated.
# `-c/--clean`   : Cleans up temporary build files after build, as no longer needed. Usually only needed when debugging build process.
# `--packagelist`: Get list of package filenames that would be produced without building.
#
# ==================================
# Full `makepkg` command.
# ==================================
# - `makepkg -srci`.
# - Installs dependencies, cleans up unecessary build-and-dependency files after build,
#   and installs resulting package.
#
# ==================================
# Configuration Notes: `makepkg`.
# ==================================
# - PKGDEST — directory for storing resulting packages, i.e. `.pkg.tar.zst` created by `makepkg` from `PKGBUILD` files.
# - SRCDEST — directory for storing source data (symbolic links will be placed to src/ if it points elsewhere),
#   i.e. intermediate directory where `makepkg` downloads actual software source files into.
# - SRCPKGDEST — directory for storing resulting source packages (built with makepkg -S).
#
# ==================================
# Other notes.
# ==================================
# - `git clean -dfx`               : Remove all files not tracked by git, used to remove all build files after `makebuild`,
#                                    if git cloning `PKGBUILD` into same folder as `SRCDEST`.
# - `paccache -c ~/build/packages/`: Clean up `PKGDEST` directory.

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -qgC - -o %o %u'
          'ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::breezy'
            'fossil::fossil'
            'git::git'
            'hg::mercurial'
            'svn::subversion')

#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH="x86_64"
CHOST="x86_64-pc-linux-gnu"

#-- Compiler and Linker Flags
#CPPFLAGS=""
CFLAGS="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection \
        -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer"
CXXFLAGS="$CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS"
LDFLAGS="-Wl,-O1 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now \
         -Wl,-z,pack-relative-relocs"
LTOFLAGS="-flto=auto"
#-- Make Flags: change this for DistCC/SMP systems
#MAKEFLAGS="-j2"
#-- Debugging flags
DEBUG_CFLAGS="-g"
DEBUG_CXXFLAGS="$DEBUG_CFLAGS"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
#BUILDDIR=/tmp/makepkg

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Makepkg defaults: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto !autodeps)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#-- lto:        Add compile flags for building with link time optimization
#-- autodeps:   Automatically add depends/provides

OPTIONS=(strip docs !libtool !staticlibs emptydirs !zipman purge debug lto)
# OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto !autodeps)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"
#-- Prefix and directories for library autodeps
LIB_DIRS=('lib:usr/lib' 'lib32:usr/lib32')

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: Put built package and cached source in build directory.
#

#-- Destination: Specify a fixed directory where all packages will be placed.
#PKGDEST=/home/packages
PKGDEST="$HOME/build/packages"

#-- Source cache: Specify a fixed directory where source files will be cached.
#SRCDEST=/home/sources
SRCDEST="$HOME/build/sources"

#-- Source packages: Specify a fixed directory where all src packages will be placed.
#SRCPKGDEST=/home/srcpackages
SRCPKGDEST="$HOME/build/srcpackages"

#-- Log files: Specify a fixed directory where all log files will be placed.
#LOGDEST=/home/makepkglogs
LOGDEST="$HOME/build/makepkglogs"

#-- Packager: Name/email of the person or organization building packages.
#PACKAGER="John Doe <john@doe.com>"
PACKAGER="Magnus G <john@doe.com>"

#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSZST=(zstd -c -T0 -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.gz'

#########################################################################
# OTHER
#########################################################################
#
#-- Command used to run pacman as root, instead of trying sudo and su
#PACMAN_AUTH=()
# vim: set ft=sh ts=2 sw=2 et:
