[alias]

  # View abbreviated SHA, description, and history graph of the latest 20 commits.
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format.
  s = status -s

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules.
  pl = pull --recurse-submodules
  p = push

  # Clone a repository including all submodules.
  c = clone --recursive

  # Commit all changes.
  ca = !git add -A && git commit -av
  cm = !git add -A && git commit -am

  # Switch to a branch, creating it if necessary.
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch --all
  remotes = remote --verbose

  # List aliases.
  aliases = config --get-regexp alias

  # Amend the currently staged files to the latest commit.
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit.
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits.
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with main.
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # Show the user email for the current repository.
  whoami = config user.email

[apply]

  # Detect whitespace errors when applying a patch.
  whitespace = fix

[branch]

  # Show most recently changed branches first.
  sort = -committerdate

[core]

  # Use custom `.gitignore` and `.gitattributes`.
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on macOS.
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Speed up commands involving untracked files such as `git status`.
  # https://git-scm.com/docs/git-update-index#_untracked_cache
  untrackedCache = true

  # Setup for delta.
  pager = delta

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[commit]

  # https://help.github.com/articles/signing-commits-using-gpg/
  # gpgsign = true
  gpgsign = false

[delta]

  true-color = always

  # Theme, must be set first.
  # Do not use quotes.
  features = colorscheme
  # features = collared-trogon
  # features = mellow-barbet

  # use n and N to move between diff sections
  navigate = true

  # Set default colors, or omit for auto-detection.
  # Manual setting needed for e.g. lazygit.
  # dark = true

  # Always use line-numbers.
  line-numbers = true

  # Always use side-by-side (automatic when merging).
  # side-by-side = true

  # Set syntax highlighting theme,
  # which is different from diff highlight theme,
  # which is set with `features`.
  # Follows `bat`, but set explicitly to be certain.
  syntax-theme = OneHalfDark
#  syntax-theme = TwoDark

#  paging=always

  # highlight DiffAdd guifg=#282c34 guibg=#98c379
  # highlight DiffChange guifg=#282c34 guibg=#e5c07b
  # highlight DiffDelete guifg=#282c34 guibg=#e06c75
  # highlight DiffText guifg=#282c34 guibg=#61afef

[delta "colorscheme"]

  # Github light:
  #   Green     : #D9FDD4
  #   Green emph: #9DCC88
  #   Red       : #FAE1E0
  #   Red emph  : #E4A3A3

  # Github dark:
  #   Green     : #152A1F
  #   Green emph: #205D2D
  #   Red       : #2D191D
  #   Red emph  : #86322F

  #   Green marg: #204C2A
  #   Red marg  : #602727

  # Style string for commit hash line.
  # Default: `raw`.
  commit-style                  = raw

  # Options: `box` | `ul` | `ol`, `ul ol`.
  # `ul` | `ol`: Underline | overline, both cover width of screen.
  commit-decorations-style      = blue ol

  # Style string for file section.
  # Default: `blue`.
  file-style                    = blue box

  # Style string for hunk-header.
  # `syntax`: First line of hunk scope is always shown, this setting controls its foreground color.
  # `file`: Includes file path in hunk header.
  # `line-number`: Includes number of first hunk line in hunk header, default on.
  # Default: `line-number syntax`.
  hunk-header-style             = file line-number syntax

  # Style string for the hunk-header decoration.
  # Default: `blue box`.
  hunk-header-decoration-style  = green ul
  # hunk-header-decoration-style  = yellow ul
  # hunk-header-decoration-style  = "#5c6370" ul
  # hunk-header-decoration-style  = gray ul

  # Style string for the file path part of the hunk-header.
  # Default: `blue`.
  hunk-header-file-style        = green
  # hunk-header-file-style        = "#5c6370"
  # hunk-header-file-style        = yellow

  # Style string for the line number part of the hunk-header.
  hunk-header-line-number-style = green
  # hunk-header-line-number-style = "#5c6370"
  # hunk-header-line-number-style = red

  minus-style                   = "syntax bold #2D191D"
  minus-non-emph-style          = "syntax #2D191D"
  minus-emph-style              = "syntax bold #86322F"
  minus-empty-line-marker-style = "syntax strike #86322F"

  # zero-style                    = normal
  zero-style                    = syntax

  plus-style                    = "syntax bold #152A1F"
  plus-non-emph-style           = "syntax #152A1F"
  plus-emph-style               = "syntax bold #205D2D"
  plus-empty-line-marker-style  = "syntax #205D2D"

  # Style string for whitespace errors.
  # Defaults to `color.diff.whitespace` if set in `.gitconfig`,
  # or else 'magenta reverse'.
  whitespace-error-style        = magenta reverse

  true-color = always

  # Better without this.
  # line-numbers-zero-style       = normal dim normal

  line-numbers-minus-style      = "normal #602727"
  line-numbers-plus-style       = "normal #204C2A"

  # line-numbers-minus-style      = red
  # line-numbers-plus-style       = green

  # line-numbers-left-style       = blue
  # line-numbers-right-style      = blue

# This is pretty good,
# but prefer background color only,
# so syntax highlighting is kept.
[delta "colorscheme-fg"]
  commit-style                  = raw
  commit-decorations-style      = blue ol
  file-style                    = omit
  hunk-header-style             = file line-number
  hunk-header-decoration-style  = blue box
  hunk-header-file-style        = red
  hunk-header-line-number-style = red
  minus-style                   = bold red
  minus-non-emph-style          = red
  minus-emph-style              = bold black red
  minus-empty-line-marker-style = normal strike red
  # zero-style                    = normal
  zero-style                    = syntax
  plus-style                    = bold green
  plus-non-emph-style           = green
  plus-emph-style               = bold black green
  plus-empty-line-marker-style  = normal green
  whitespace-error-style        = reverse purple
  true-color                    = always
  line-numbers-zero-style       = dim normal
  line-numbers-minus-style      = red
  line-numbers-plus-style       = green
  line-numbers-left-style       = blue
  line-numbers-right-style      = blue

[delta "interactive"]
  features = colorscheme
  keep-plus-minus-markers = false

[diff]

  colorMoved = default

  # Detect copies as well as renames.
  renames = copies

  submodule = log

  # Use vimdiff as diff tool.
  tool = nvimdiff

[difftool]

  prompt = false

[diff "bin"]

  # Use `hexdump` to diff binary files.
  textconv = hexdump -v -C

[help]

  # Automatically correct and execute mistyped commands.
  autocorrect = 1

[include]

  # Path to `delta` themes.
  path = ~/.config/delta/themes.gitconfig

[interactive]

  # Setup for delta.
  diffFilter = delta --color-only --features=interactive

[merge]

  # Use vimdiff as tool for merges.
  tool = nvimdiff

  # Include summaries of merged commits in newly created merge commit messages
  log = true

  # Setup for delta.
  conflictstyle = zdiff3
  # conflictstyle = diff3

[mergetool]

  prompt = false

  keepBackup = false

[mergetool "nvimdiff"]

  layout = "LOCAL,BASE,REMOTE / MERGED"

[pager]
  blame  = delta
  diff   = delta
  reflog = delta
  show   = delta

[push]

  # https://git-scm.com/docs/git-config#git-config-pushdefault
  default = simple

  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[init]

  defaultBranch = main

[user]
  name = Magnus
  email = magnus.rinnan@gmail.com
[credential]
 helper = "!f() { /home/nfu/.vscode-server/bin/7adae6a56e34cb64d08899664b814cf620465925/node /tmp/vscode-remote-containers-f32b065a-b8ac-4080-911f-76a4872612bd.js git-credential-helper $*; }; f"
